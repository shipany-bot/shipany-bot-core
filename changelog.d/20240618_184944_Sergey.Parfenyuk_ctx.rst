.. A new scriv changelog fragment.
..
.. Uncomment the header that is right (remove the leading dots).
..
.. Removed
.. -------
..
.. - A bullet item for the Removed category.
..
Added
-----

- A new entity called `Scope` that defines a scope for a state. The state can be stored or retrieved either in/from the user, chat or both scopes. If no scope is defined, the state is temporary and is not stored in the persistency.
- A debugging configuration for the VS Code editor.
- The abstract class `HandlesGenerator`, which can be extended to provide a custom implementation for particular persistency storage.
- The inherited class `AiogramHandleGenerator` provides a default implementation for the persistency storage using the context of the `aiogram` events and the given scope.


Changed
-------


- To load a state to the current scope from persistency, use the `StateAction@1` class with the `load` type. The loaded value will be available to any following action within given step or steps.
- The `StateAction@1` class has a new type called `remove`. It removes the state from the selected scope. Prior to that, one could use the `StateAction@1` class with the `store` type and the `null` value to remove the state. Now, it is prohibited.
- Leverage the `inject` library to inject runtime bindings.
- Methods can be defined in `bindings` modules cascadingly. The `bindings` module can be nested in another `bindings` module.
- `ExtendedContext` is renamed to `ConversationContext` and moved away from the `aiogram` package.
- JsonLogic uses the `ConversationContext` as data provider directly.
- The `VarOperation` class comes with the scope parameter. It is used to define the scope of the variable. The scope can be `user` or `chat`. If no scope is defined, the variable is retrieved from the session.

.. Deprecated
.. ----------
..
.. - A bullet item for the Deprecated category.
..
.. Fixed
.. -----
..
.. - A bullet item for the Fixed category.
..
Security
--------

- The actions can refer only to a state in the current temporary scope. Before, actions could use a shared state and compromise the security.
- The jinja2 templates will not be able to expose secrets anymore when `safe=False` is set.
